<div class="chart">
  <canvas id="costBreakdownChart"></canvas>
  <script type="text/javascript">
    let costs = <%= raw(@cost_breakdown.to_json) %>;
    let actual_breakdown_data = [
      {
        label: 'remaining budget',
        data: costs['actual']['remaining budget'],
        borderColor: 'rgba(120, 63, 191, 0.8)',
        backgroundColor: 'rgba(120, 63, 191, 0.8)',
        type: 'line',
        fill: false,
        cubicInterpolationMode: 'monotone',
        show: <%= !@datasets || @datasets.include?('budget') %>
        },
        <% @cost_breakdown[:actual][:compute_groups].keys.each do |group| %>
          {
            <% base_group = group.to_s.gsub('_storage', '') %>
            label: "<%= group %>",
            data: costs['actual']['compute_groups']['<%= group.to_s %>'],
            backgroundColor: '#<%= @project.front_end_compute_groups[base_group]["#{'storage_' if group.to_s.end_with?("storage")}colour"] %>',
            stack: 'bars',
            show: <%= !@datasets || @datasets.include?(base_group) %>
          },
        <% end %>
        {
          label: 'core',
          data: costs['actual']['core'],
          backgroundColor: 'rgb(14, 163, 27)',
          borderColor: 'rgb(8, 109, 17)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('core') %>
        },
        {
          label: 'core storage',
          data: costs['actual']['core storage'],
          backgroundColor: 'rgb(34, 239, 2)',
          borderColor: 'rgb(34, 250, 29)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('core') %>
        },
        {
          label: 'data out',
          data: costs['actual']['data out'],
          backgroundColor: 'rgb(244, 215, 87)',
          borderColor: 'rgb(241, 204, 39)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('data out') %>
        },
        {
          label: 'other',
          data: costs['actual']['other'],
          backgroundColor: 'rgb(96, 96, 96)',
          borderColor: 'rgb(96, 96, 96)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('other') %>
        },
      ]
    let forecast_breakdown_data = [
      {
        label: 'forecast remaining budget',
          data: costs['forecast']['remaining budget'],
          borderColor: 'rgba(120, 63, 191, 0.4)',
          backgroundColor: 'rgba(120, 63, 191, 0.4)',
          type: 'line',
          fill: false,
          cubicInterpolationMode: 'monotone',
          borderDash: [1, 1],
          show: <%= !@datasets || @datasets.include?('budget') %>
        },
        <% @cost_breakdown['forecast'][:compute_groups].keys.each do |group| %>
          {
            <% base_group = group.to_s.gsub('_storage', '') %>
            label: '<%= "forecast #{group}" %>',
            data: costs['forecast']['compute_groups']['<%= group %>'],
            backgroundColor: '<%= lighten_colour("#{@project.front_end_compute_groups[base_group]["#{'storage_' if group.to_s.end_with?("storage")}colour"]}") %>',
            stack: 'bars',
            show: <%= !@datasets || @datasets.include?(base_group) %>
          },
        <% end %>
        {
          label: 'forecast core',
          data: costs['forecast']['core'],
          backgroundColor: 'rgb(148, 206, 153)',
          borderColor: 'rgb(148, 206, 153)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('core') %>
        },
        {
          label: 'forecast core storage',
          data: costs['forecast']['core_storage'],
          backgroundColor: 'rgb(124, 237, 106)',
          borderColor: 'rgb(124, 237, 106)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('core') %>
        },
        {
          label: 'forecast data out',
          data: costs['forecast']['data out'],
          backgroundColor: 'rgb(249, 235, 169)',
          borderColor: 'rgb(249, 235, 169)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('data out') %>
        },
        {
          label: 'forecast other',
          data: costs['forecast']['other'],
          backgroundColor: 'rgb(178, 178, 178)',
          borderColor: 'rgb(178, 178, 178)',
          stack: 'bars',
          show: <%= !@datasets || @datasets.include?('other') %>
        }
      ]
    let ctx = document.getElementById('costBreakdownChart').getContext('2d');
    let costs_chart = null;
    costs_chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: costs.dates,
        datasets: [
        <% if @cost_breakdown[:actual][:any] %>
          actual_breakdown_data,
        <%end%>
        <% if @cost_breakdown['forecast'][:any] %>
          forecast_breakdown_data,
        <%end%>
        ].flat()
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        title: {
          display: true,
          text: 'Select a dataset in the legend to toggle visibility',
          padding: 0
        },legend: {
          labels: {
            filter: function(item, data) {
              return !(item.text.includes('forecast') && forecastAndActual());
            }
          },
          onClick: hideRelatedDatasetOnClick
        },
        tooltips: {
          mode: 'index',
          position: 'nearest',
          filter: function(tooltipItem, data) {
              return !(data.datasets[tooltipItem.datasetIndex].label.includes('forecast') && tooltipItem.index === overlapDateIndex()) && tooltipItem.value != "NaN"
          },
        },
        scales: {
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Date'
            },
          }],
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Compute Units'
            },
          }],
        }
      }
    });
    filterDatasets();
    costs_chart.update();
  </script>
</div>
