<div class="chart tab-pane costs-pane" role="tabpanel" id="cumulative-costs">
  <canvas id="cumulativeChart"></canvas>
  <script type="text/javascript">
    let cumulative =<%= raw(@cumulative_costs.to_json) %>;
    let actual_cumulative_data = [
      {
        label: 'cycle total',
        data: cumulative['actual']['total'],
        backgroundColor: 'rgb(230, 138, 25)',
        borderColor: 'rgb(202,121,23)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        show: <%= !@datasets || @datasets.include?('cycle total') %>
      },
      <%  @cumulative_costs[:actual][:compute_groups].keys.each do |group| %>
        {
          <% base_group = group.to_s.gsub('_storage', '') %>
          <% colour = @project.front_end_compute_groups[base_group]["#{'storage_' if group.to_s.end_with?("storage")}colour"] %>
          label: "<%= group.to_s.gsub("_", " ") %>",
          data: cumulative['actual']['compute_groups']['<%= group %>'],
          backgroundColor: '#<%= colour %>',
          borderColor: '#<%= colour %>',
          fill: false,
          cubicInterpolationMode: 'monotone',
          type: 'line',
          show: <%= !@datasets || @datasets.include?(base_group) %>
        },
      <% end %>
      {
        label: 'core',
        data: cumulative['actual']['core'], 
        backgroundColor: 'rgb(14, 163, 27)',
        borderColor: 'rgb(8, 109, 17)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        show: <%= !@datasets || @datasets.include?('core') %>
      },
      {
        label: 'core storage',
        data: cumulative['actual']['core storage'],
        backgroundColor: 'rgb(34, 239, 2)',
        borderColor: 'rgb(34, 250, 29)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        show: <%= !@datasets || @datasets.include?('core') %>
      },
      {
        label: 'data out',
        data: cumulative['actual']['data out'],
        backgroundColor: 'rgb(244, 215, 87)',
        borderColor: 'rgb(241, 204, 39)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        show: <%= !@datasets || @datasets.include?('data out') %>
      },
      {
        label: 'other',
        data: cumulative['actual']['other'],
        backgroundColor: 'rgb(96, 96, 96)',
        borderColor: 'rgb(96, 96, 96)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        show: <%= !@datasets || @datasets.include?('other') %>
      }
    ]
    let forecast_cumulative_data = [
      {
        label: 'forecast cycle total',
        data: cumulative['forecast']['total'],
        backgroundColor: 'rgb(250, 198, 135)',
        borderColor: 'rgb(250, 198, 135)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        borderDash: [1, 1],
        type: 'line',
        show: <%= !@datasets || @datasets.include?('cycle total') %>
      },
      <%  @cumulative_costs['forecast'][:compute_groups].keys.each do |group| %>
        {
          <% base_group = group.to_s.gsub('_storage', '') %>
          <% colour = @project.front_end_compute_groups[base_group]["#{'storage_' if group.to_s.end_with?("storage")}colour"] %>
          <% colour = lighten_colour(colour) %>
          label: '<%= "forecast #{group.to_s.gsub("_", " ")}" %>',
          data: cumulative['forecast']['compute_groups']['<%= group %>'],
          backgroundColor: '<%= colour %>',
          borderColor: '<%= colour %>',
          fill: false,
          cubicInterpolationMode: 'monotone',
          type: 'line',
          borderDash: [1, 1],
          show: <%= !@datasets || @datasets.include?(base_group) %>
        },
      <% end %>
      {
        label: 'forecast core',
        data: cumulative['forecast']['core'], 
        backgroundColor: 'rgb(148, 206, 153)',
        borderColor: 'rgb(148, 206, 153)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        borderDash: [1, 1],
        show: <%= !@datasets || @datasets.include?('core') %>
      },
      {
        label: 'forecast core storage',
        data: cumulative['forecast']['core storage'],
        backgroundColor: 'rgb(124, 237, 106)',
        borderColor: 'rgb(124, 237, 106)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        borderDash: [1, 1],
        show: <%= !@datasets || @datasets.include?('core') %>
      },
      {
        label: 'forecast data out',
        data: cumulative['forecast']['data out'],
        backgroundColor: 'rgb(249, 235, 169)',
        borderColor: 'rgb(249, 235, 169)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        borderDash: [1, 1],
        show: <%= !@datasets || @datasets.include?('data out') %>
      },
      {
        label: 'forecast other',
        data: cumulative['forecast']['other'],
        backgroundColor: 'rgb(178, 178, 178)',
        borderColor: 'rgb(178, 178, 178)',
        fill: false,
        cubicInterpolationMode: 'monotone',
        type: 'line',
        borderDash: [1, 1],
        show: <%= !@datasets || @datasets.include?('other') %>
      },
    ]
    ctx = document.getElementById('cumulativeChart').getContext('2d');
    let cumulative_chart = null;
    cumulative_chart = new Chart(ctx, {
      type: 'bar',
      data: {
        cycle_thresholds: <%= raw(@cycle_thresholds.to_json) %>,
        balance_end: <%= raw(@estimated_end_of_balance.to_json) %>,
        off: <%= raw(@switch_offs.to_json) %>,
        labels: cumulative.dates,
        datasets: [
          {
            label: 'budget',
            data: cumulative['budget'],
            borderColor: 'rgba(120, 63, 191, 0.8)',
            backgroundColor: 'rgba(120, 63, 191, 0.8)',
            fill: false,
            cubicInterpolationMode: 'monotone',
            type: 'line',
            show: <%= !@datasets || @datasets.include?('budget') %>
          },
        <% if @cost_breakdown[:actual][:any] %>
          actual_cumulative_data,
        <% end %>
        <% if @cost_breakdown['forecast'][:any] %>
          forecast_cumulative_data,
        <% end %>
        ].flat()
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        title: {
          display: true,
          text: 'Select a dataset in the legend to toggle visibility',
          padding: 0
        },
        scales: {
          x: {
            title: {
              display: true,
              text: 'Date',
              font: {
                size: 16
              }
            },
            grid: {
              color: gridColour
            },
            border: {
              color: borderColour
            },
          },
          y: {
            title: {
              display: true,
              text: 'Compute Units',
              font: {
                size: 16
              }
            },
            ticks: {
              maxTicksLimit: 8
            },
            grid: {
              color: gridColour
            },
            border: {
              color: borderColour
            },
          },
        },
        plugins: {
          legend: {
            labels: {
              filter: function (item, data) {
                return !(item.text.includes('forecast') && forecastAndActual());
              }
            },
            onClick: hideRelatedDatasetOnClick
          },
          tooltips: {
            mode: 'index',
            position: 'nearest',
            filter: function(tooltipItem, data) {
              return !(data.datasets[tooltipItem.datasetIndex].label.includes('forecast') && tooltipItem.index === overlapDateIndex())
            },
          },
        }
      }
    });
    filterDatasets(cumulative_chart);
    cumulative_chart.update();
  </script>
</div>
